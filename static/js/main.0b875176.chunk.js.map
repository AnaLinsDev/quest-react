{"version":3,"sources":["redux/quests/quests.types.js","pages/home/home-page.component.jsx","redux/quests/quests.actions.js","components/radio-group/radio-group.component.jsx","components/quest-card/quest-card.component.jsx","pages/questions/questions-page.component.jsx","pages/report/report-page.component.jsx","pages/error/error-page.component.jsx","pages/confirm/confirm-page.component.jsx","App.js","redux/quests/quests.utils.js","redux/quests/quests.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["QuestsActionTypes","connect","state","quant","quests","dispatch","addQuant","type","payload","useState","isNumber","setIsNumber","path","setPath","className","TextField","id","onChange","event","value","target","isNaN","alert","defaultValue","label","variant","to","RadioGroupComponent","answers","i","length","index","Math","floor","random","splice","push","FormControl","component","RadioGroup","name","map","a","FormControlLabel","control","Radio","QuestCard","quest","answered","ans","correct_answer","incorrect_answers","difficulty","category","question","QuestionsPage","props","this","addQuests","fetch","method","then","res","json","out","results","catch","err","questsList","q","Component","ReportPage","ErrorPage","ConfirmPage","match","params","React","App","HomePage","addQuestsUtils","list","listToAdd","originalObject","plusObject","choosenAnswer","status","finalObject","Object","assign","INITIAL_STATE","questsReducer","action","rootReducer","combineReducers","store","createStore","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAAaA,EACE,YADFA,EAEG,aAFHA,EAGE,YAHFA,EAIM,gB,OCqDnB,IAQeC,eARS,SAAAC,GAAK,MAAK,CAChCC,MAAQD,EAAME,OAAOD,UAGI,SAAAE,GAAQ,MAAK,CACtCC,SAAU,SAAAH,GAAK,OAAIE,EC5DG,SAACF,GAAD,MAAY,CAChCI,KAAMP,EACNQ,QAASL,GD0DiBG,CAASH,QAGxBF,EAxDf,YAA+B,IAAZK,EAAW,EAAXA,SAEjB,EAAgCG,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,cAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAkBA,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,6FAEM,uBACA,qBAAKA,UAAU,aAAf,SACE,cAACC,EAAA,EAAD,CACAC,GAAG,iBACHC,SAvBS,SAACC,GACpB,IAAMC,EAASD,EAAME,OAAOD,MAExBE,MAAMF,IACRG,MAAM,2DACNX,GAAY,KAIZA,GAAY,GACZL,EAASa,GACTN,EAAQ,YAAcM,KAadI,aAAc,IACdC,MAAM,aACNC,QAAQ,eAETf,EAED,cAAC,IAAD,CACAI,UAAU,kBACVY,GAAId,EAFJ,2BAME,W,wDEVCe,MAjCf,YAGI,IAHqC,IAAXC,EAAU,EAAVA,QAGjBC,EAAI,EAAGA,EAAID,EAAQE,OAASD,IAAI,CACrC,IAAME,EAAQC,KAAKC,MAAMD,KAAKE,SAASN,EAAQE,QACzCI,EAASN,EAAQG,GACvBH,EAAQO,OAAOJ,EAAO,GACtBH,EAAQQ,KAAKF,GAGjB,OACI,sBAAKpB,UAAU,cAAf,8BACqB,uBAAK,uBACtB,cAACuB,EAAA,EAAD,CAAaC,UAAU,WAAvB,SACI,cAACC,EAAA,EAAD,CACI,aAAW,SACXhB,aAAa,SACbiB,KAAK,sBAHT,SAKKZ,EAAQa,KAAK,SAAAC,GAAC,OACX,cAACC,EAAA,EAAD,CACAxB,MAAOuB,EACPE,QAAS,cAACC,EAAA,EAAD,IACTrB,MAAOkB,eCChBI,MA1Bf,YAA6B,IAATC,EAAQ,EAARA,MAEhB,EAAgCtC,oBAAS,GAAzC,mBAAOuC,EAAP,KAGMC,GAHN,KAGY,IAIZ,OAHAA,EAAIb,KAAKW,EAAMG,gBACfH,EAAMI,kBAAkBV,KAAI,SAAAC,GAAC,OAAIO,EAAIb,KAAKM,MAGtC,sBAAK5B,UAAU,aAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,uBAAMA,UAAU,aAAhB,cAA+BiC,EAAMK,cACpCL,EAAM/B,GAFX,IAEe,uBAAK,uBACf+B,EAAMM,SAHX,IAGqB,uBAAK,uBACrBN,EAAMO,SAJX,IAIqB,uBAAK,0BAI1B,cAAC,EAAD,CAAqB1B,QAASqB,EAAKD,SAAUA,QCfnDO,E,kDACJ,WAAYC,GAAO,uCACXA,G,qDAER,WAEE,IAAOrD,EAASsD,KAAKD,MAAdrD,MACAuD,EAAaD,KAAKD,MAAlBE,UAEPC,MAAM,sCAAD,OAAuCxD,GAC5C,CAAEyD,OAAQ,QACTC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAG,GACHN,EAAUM,EAAIC,YAEjBC,OAAM,SAAAC,GAAS,MAAOA,O,oBAIzB,WAEE,IAAOC,EAAcX,KAAKD,MAAnBY,WAEP,OACE,qBAAKtD,UAAU,iBAAf,SAEIsD,EAAW3B,KAAK,SAAA4B,GAAC,OAAI,cAAC,EAAD,CAAsBtB,MAAOsB,GAAbA,EAAErD,a,GA1BrBsD,aA0CbrE,eATS,SAAAC,GAAK,MAAK,CAChCC,MAAQD,EAAME,OAAOD,MACrBiE,WAAalE,EAAME,OAAOgE,eAGD,SAAA/D,GAAQ,MAAK,CACtCqD,UAAW,SAAAtD,GAAM,OAAIC,EH1CE,SAACD,GAAD,MAAa,CAClCG,KAAMP,EACNQ,QAASJ,GGwCmBsD,CAAUtD,QAG3BH,CAA6CsD,G,MC1C7CgB,MARf,WACE,OACE,qBAAKzD,UAAU,cAAf,sB,MCMW0D,MARf,WACE,OACE,qBAAK1D,UAAU,aAAf,yBC2BW2D,G,yDAzBX,WAAYjB,GAAO,IAAD,8BAClB,cAAMA,IAEDtD,MAAQ,CACTC,MAAQqD,EAAMkB,MAAMC,OAAOxE,MAC3BS,KAAO,cALO,E,0CASlB,WAEI,OACI,sBAAKE,UAAU,OAAf,uCAC+B2C,KAAKvD,MAAMC,MAD1C,KACkD,uBAC9C,uBACA,sBAAKW,UAAU,uBAAf,UACI,cAAC,IAAD,CAAMA,UAAU,kBAAkBY,GAAI,cAAgB+B,KAAKvD,MAAMC,MAAjE,mBACA,cAAC,IAAD,CAAMW,UAAU,kBAAkBY,GAAG,IAArC,8B,GAlBMkD,IAAMN,YCI1BO,E,4JACJ,WACE,OACA,qBAAK/D,UAAU,MAAf,SACE,cAAC,IAAD,UACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOF,KAAK,eAAsB0B,UAAWwC,IAC7C,cAAC,IAAD,CAAOlE,KAAK,kBAAsB0B,UAAWmC,IAC7C,cAAC,IAAD,CAAO7D,KAAK,oBAAsB0B,UAAWiB,IAC7C,cAAC,IAAD,CAAO3C,KAAK,UAAsB0B,UAAWiC,IAC7C,cAAC,IAAD,CAAOjC,UAAWkC,e,GAVVI,IAAMN,WAkBTO,I,iCC1BFE,EAAiB,SAACC,EAAMC,GAEjC,IAAM,IAAIpD,EAAI,EAAIA,EAAIoD,EAAUnD,OAASD,IAAK,CAG1C,IAAMqD,EAAiBD,EAAUpD,GAG3BsD,EAAa,CACjBnE,GAAIa,EACJuD,cAAe,KACfC,OAAQ,UAIJC,EAAcC,OAAOC,OAAON,EAAgBC,GAGlDH,EAAK5C,KAAKkD,GAGZ,OAAON,GCnBPS,EAAe,CACjBrB,WAAY,GAEZjE,MAAQ,GAqDGuF,EAvCO,WAAqC,IAApCxF,EAAmC,uDAA1BuF,EAAeE,EAAW,uCAEtD,OAAQA,EAAOpF,MAGX,KAAKP,EACD,OAAO,2BACAE,GADP,IAEIC,MAAQwF,EAAOnF,UAIvB,KAAKR,EACD,OAAO,2BACAE,GADP,IAEIkE,WAAYW,EAAe,GAAIY,EAAOnF,WAI9C,KAAKR,EACD,OAAO,2BACAE,GADP,IAEIC,MAAO,EACPiE,WAAY,KAIpB,KAAKpE,EACD,OAAO,2BACAE,GADP,IAEIkE,WAAYuB,EAAOnF,UAI3B,QACI,OAAON,IC1CJ0F,EALKC,YAAgB,CAChCzF,OAASsF,ICAAI,EAAQC,YAAYH,EAAaI,YAAgBC,MCY9DC,IAASC,OAEP,cAAC,IAAD,CAAUL,MAAUA,EAApB,SACE,cAAC,IAAMM,WAAP,UACI,cAAC,EAAD,QAINC,SAASC,eAAe,U","file":"static/js/main.0b875176.chunk.js","sourcesContent":["export const QuestsActionTypes = {\r\n    ADD_QUANT: 'ADD_QUANT',\r\n    ADD_QUESTS: 'ADD_QUESTS',\r\n    SET_QUEST: 'SET_QUEST',\r\n    REMOVE_QUESTS: 'REMOVE_QUESTS'\r\n}","import './home-page.styles.scss';\r\nimport React, {useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { addQuant } from '../../redux/quests/quests.actions';\r\n\r\nfunction HomePage({addQuant}) {\r\n\r\n  const [isNumber, setIsNumber] = useState(true)\r\n  const [path, setPath] = useState(\"/confirm/0\")\r\n\r\n\r\n  const handleChange = (event) => {\r\n    const value =  event.target.value \r\n \r\n    if (isNaN(value)){\r\n      alert(\"Verifique se a quantidade contém apenas números !\");\r\n      setIsNumber(false);\r\n    }\r\n    \r\n    else{\r\n      setIsNumber(true);\r\n      addQuant(value)\r\n      setPath(\"/confirm/\" + value);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      <div className=\"card\">     \r\n            Escolha a quantidade de perguntas de conhecimentos gerais que deseja responder :     \r\n            <br/>\r\n            <div className=\"home-input\">\r\n              <TextField \r\n              id=\"standard-basic\" \r\n              onChange= {handleChange}\r\n              defaultValue= '0'\r\n              label=\"Quantidade\" \r\n              variant=\"standard\" />\r\n            </div>\r\n            {isNumber ? \r\n\r\n            <Link \r\n            className=\"positive-button\" \r\n            to={path} >\r\n              Vamos lá !\r\n            </Link>\r\n\r\n            : ''}\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  quant : state.quests.quant\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addQuant: quant => dispatch(addQuant(quant)) \r\n  })\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)\r\n","import {QuestsActionTypes} from './quests.types'\r\n\r\nexport const addQuant = (quant) => ({\r\n    type: QuestsActionTypes.ADD_QUANT,\r\n    payload: quant\r\n})\r\n\r\nexport const addQuests = (quests) => ({\r\n    type: QuestsActionTypes.ADD_QUESTS,\r\n    payload: quests\r\n})\r\n\r\nexport const removeQuests = (quests) => ({\r\n    type: QuestsActionTypes.REMOVE_QUESTS,\r\n    payload: quests\r\n})\r\n\r\nexport const updateQuest = (quests) => ({\r\n    type: QuestsActionTypes.SET_QUEST,\r\n    payload: quests\r\n})","import './radio-group.styles.scss';\r\nimport React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nfunction RadioGroupComponent({answers}) {\r\n    \r\n    // aqui deve deixar as respostas aleatorias\r\n    for (var i = 0; i < answers.length ; i++){\r\n        const index = Math.floor(Math.random()*answers.length)\r\n        const random = answers[index]\r\n        answers.splice(index, 1)\r\n        answers.push(random)\r\n    }\r\n\r\n    return (\r\n        <div className=\"radio-group\">\r\n            Choose an answer:<br/><br/>\r\n            <FormControl component=\"fieldset\">\r\n                <RadioGroup\r\n                    aria-label=\"answer\"\r\n                    defaultValue=\"female\"\r\n                    name=\"radio-buttons-group\"\r\n                >\r\n                    {answers.map( a =>\r\n                        <FormControlLabel \r\n                        value={a} \r\n                        control={<Radio />} \r\n                        label={a}  />\r\n                                            )}\r\n\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div> \r\n\r\n    );\r\n}\r\n\r\nexport default RadioGroupComponent;","import './quest-card.styles.scss';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport RadioGroupComponent from '../radio-group/radio-group.component';\r\n\r\n\r\nfunction QuestCard({quest}) {\r\n\r\n    const [answered, setAnswered] = useState(false)\r\n    \r\n    // aqui deve juntar todas respostas em um array\r\n    const ans = []\r\n    ans.push(quest.correct_answer)\r\n    quest.incorrect_answers.map(a => ans.push(a))\r\n\r\n    return (\r\n        <div className=\"quest-card\">\r\n            <div className=\"info-quest-card\">\r\n                <span className=\"difficulty\"> {quest.difficulty}</span>\r\n                {quest.id} <br/><br/> \r\n                {quest.category} <br/><br/> \r\n                {quest.question} <br/><br/>\r\n                \r\n            </div>\r\n            \r\n            <RadioGroupComponent answers={ans} answered={answered}/>\r\n\r\n        </div> \r\n\r\n    );\r\n}\r\n\r\nexport default QuestCard;","import './questions-page.styles.scss';\r\nimport React, { Component } from 'react';\r\nimport QuestCard from '../../components/quest-card/quest-card.component';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { addQuests } from '../../redux/quests/quests.actions';\r\n\r\n\r\n\r\nclass QuestionsPage extends Component{\r\n  constructor(props){\r\n    super(props)\r\n}\r\n  componentDidMount(){\r\n\r\n    const {quant} = this.props\r\n    const {addQuests} = this.props\r\n\r\n    fetch(`https://opentdb.com/api.php?amount=${quant}`, \r\n    { method: 'GET' })\r\n    .then (res => res.json() )\r\n    .then (out => {\r\n        addQuests(out.results)\r\n    })\r\n    .catch(err => { throw  err })\r\n\r\n  }\r\n\r\n  render(){\r\n\r\n    const {questsList} = this.props\r\n\r\n    return (\r\n      <div className=\"questions-page\">\r\n        {\r\n          questsList.map( q => <QuestCard key={q.id} quest={q}/>)\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  quant : state.quests.quant,\r\n  questsList : state.quests.questsList\r\n  })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addQuests: quests => dispatch(addQuests(quests)) \r\n  })\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsPage)\r\n","import './report-page.styles.scss';\r\n\r\nfunction ReportPage() {\r\n  return (\r\n    <div className=\"report-page\">\r\n      REPOPRT\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReportPage;","import './error-page.styles.scss';\r\n\r\nfunction ErrorPage() {\r\n  return (\r\n    <div className=\"error-page\">\r\n      ERROR PAGE\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorPage;","import './confirm-page.styles.scss';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass ConfirmPage extends React.Component {\r\n    constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n        quant : props.match.params.quant,\r\n        path : \"/confirm/0\"\r\n    }\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                Quantidade de perguntas : {this.state.quant}. <br />\r\n                <br />\r\n                <div className=\"confirm-page-buttons\">\r\n                    <Link className=\"positive-button\" to={\"/questions/\" + this.state.quant} >Start</Link>\r\n                    <Link className=\"negative-button\" to=\"/\" >Cancel</Link> \r\n                </div>\r\n            </div> \r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConfirmPage;","import './App.css';\nimport React from 'react';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport HomePage from './pages/home/home-page.component';\nimport QuestionsPage from './pages/questions/questions-page.component';\nimport ReportPage from './pages/report/report-page.component';\nimport ErrorPage from './pages/error/error-page.component';\nimport ConfirmPage from './pages/confirm/confirm-page.component';\n\nclass App extends React.Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <Router>\n      <Switch>\n          <Route path='/quest-react'        component={HomePage} />\n          <Route path='/confirm/:quant'     component={ConfirmPage}/>\n          <Route path='/questions/:quant'   component={QuestionsPage} />\n          <Route path='/report'             component={ReportPage} />\n          <Route component={ErrorPage}  />\n      </Switch>\n      </Router>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","\r\nexport const addQuestsUtils = (list, listToAdd) => {\r\n\r\n    for ( var i = 0 ; i < listToAdd.length ; i++ ){\r\n      \r\n        //pegará o objeto n posiçao\r\n        const originalObject = listToAdd[i]\r\n\r\n        // objeto generico mudando o id apenas\r\n        const plusObject = {\r\n          id: i,\r\n          choosenAnswer: null,\r\n          status: \"ABERTO\"\r\n        }\r\n\r\n        // junção dos 2 objetos em um\r\n        const finalObject = Object.assign(originalObject, plusObject)\r\n\r\n        // adiciona objeto final na lista\r\n        list.push(finalObject)\r\n  \r\n      }\r\n      return list\r\n}\r\n","import {QuestsActionTypes} from './quests.types'\r\nimport {addQuestsUtils} from './quests.utils'\r\n\r\nconst INITIAL_STATE ={\r\n    questsList: [],\r\n\r\n    quant : 0\r\n}\r\n\r\n    /*\r\n    Na lista deve ter varios objetos que serão cada pergunta\r\n    Dessa forma :\r\n    {\r\n        Categoria, Dificuldade, Tipo, Questão,\r\n        Lista de respostas,\r\n        Resposta escolhida,\r\n        Status\r\n    }\r\n    */\r\n\r\nconst questsReducer = (state =  INITIAL_STATE, action) => {\r\n\r\n    switch (action.type){\r\n\r\n        // adicionar quantidade\r\n        case QuestsActionTypes.ADD_QUANT:\r\n            return {\r\n                ...state,\r\n                quant : action.payload\r\n            }\r\n\r\n        // adicionar questões (objetos)\r\n        case QuestsActionTypes.ADD_QUESTS:\r\n            return {\r\n                ...state,\r\n                questsList: addQuestsUtils([] ,action.payload)\r\n            }\r\n\r\n        // remover questões (objetos)\r\n        case QuestsActionTypes.REMOVE_QUESTS:\r\n            return {\r\n                ...state,\r\n                quant: 0,\r\n                questsList: []\r\n            }\r\n\r\n        // quando a quest for respondida, deve alterar o objeto\r\n        case QuestsActionTypes.SET_QUEST:\r\n            return {\r\n                ...state,\r\n                questsList: action.payload\r\n            }\r\n\r\n        //retorno padrão\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default questsReducer","import {combineReducers } from 'redux'\r\nimport questsReducer from './quests/quests.reducer';\r\n\r\n/* \r\n    o root-reducer será a base de todo o state da aplicação,\r\n    ou seja, sempre que ocorrer uma mudançã, deve passar por aqui\r\n*/\r\n\r\nconst rootReducer = combineReducers({\r\n    quests : questsReducer,\r\n})\r\n\r\n\r\nexport default rootReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { createStore, applyMiddleware} from 'redux'\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './root-reducer'\r\n\r\n/* \r\n    O  middleware logger será útil para debuggar, \r\n    já que irá printar o que está acontecendo\r\n*/\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(logger))\r\n\r\nexport default {store};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//redux\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store';\n\n/*\nTO DEPLOY:\ngit add .\ngit commit -m \"\"\ngit push\nnpm run deploy\n\nProvider -> \n  É um componente que será um pai de todos que\n  irá prover o contato com os componentes \n  e state da aplicação\n*/\n\nReactDOM.render(\n\n  <Provider store = { store } >\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n  </Provider>,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}